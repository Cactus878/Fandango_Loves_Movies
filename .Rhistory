plot(cars)
print(cars)
plot(cars)
install.packages("shiny")
library(shiny)
runExample("01_hello")
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Created: 14/05/2025
# Creator: Yanni Karlaftis
# Purpose: Clean fandango_score_comparison.csv and repopulate
library(readr)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
library(readr)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
setwd("C:\Users\yanni\Documents\GitHub\Fandango_Loves_Movies")
setwd("C:\\Users\\yanni\\Documents\\GitHub\\Fandango_Loves_Movies")
library(readr)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
fandango_score_comparison <- fandango_score_comparison %>%
filter(Metacritic_user_vote_count > 30, IMDB_user_vote_count > 30)
library(readr)
library(dplyr)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
fandango_score_comparison <- fandango_score_comparison %>%
filter(Metacritic_user_vote_count > 30, IMDB_user_vote_count > 30)
# Select only specific columns for visualization
data <- fandango_score_comparison %>%
select(FILM, Fandango_Stars, IMDB_norm_round, RT_norm_round, Metacritic_norm_round, Metacritic_user_norm_round, RT_user_norm_round) %>%
rename(
Film = FILM,
Fandango_Rating = Fandango_Stars,
IMDB_Rating = IMDB_norm_round,
RT_Rating = RT_norm_round,
Metacritic_Rating = Metacritic_norm_round,
Metacritic_User_Rating = Metacritic_user_norm_round,
RT_User_Rating = RT_user_norm_round
)
# Calculate distributions
fandango_distribution <- data %>%
group_by(Fandango_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Fandango")
IMDB_distribution <- data %>%
group_by(IMDB_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "IMDB")
RT_distribution <- data %>%
group_by(RT_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes")
Metacritic_distribution <- data %>%
group_by(Metacritic_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic")
Metacritic_user_distribution <- data %>%
group_by(Metacritic_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic User")
RT_user_distribution <- data %>%
group_by(RT_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes User")
# Rename rating columns to the same name so we can bind rows
fandango_distribution <- fandango_distribution %>% rename(Rating = Fandango_Rating)
IMDB_distribution <- IMDB_distribution %>% rename(Rating = IMDB_Rating)
RT_distribution <- RT_distribution %>% rename(Rating = RT_Rating)
Metacritic_distribution <- Metacritic_distribution %>% rename(Rating = Metacritic_Rating)
RT_user_distribution <- RT_user_distribution %>% rename(Rating = RT_User_Rating)
Metacritic_user_distribution <- Metacritic_user_distribution %>% rename(Rating = Metacritic_User_Rating)
# Combine into one dataframe
combined_distribution <- bind_rows(fandango_distribution, IMDB_distribution, RT_distribution, Metacritic_distribution, Metacritic_user_distribution, RT_user_distribution)
combined_distribution$Source <- factor(combined_distribution$Source)
View(combined_distribution)
View(combined_distribution)
View(combined_distribution)
# Created: 14/05/2025
# Creator: Yanni Karlaftis
# Purpose: Clean fandango_score_comparison.csv and repopulate
library(readr)
library(dplyr)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
fandango_score_comparison <- fandango_score_comparison %>%
filter(Metacritic_user_vote_count > 30, IMDB_user_vote_count > 30)
# Select only specific columns for visualization
data <- fandango_score_comparison %>%
select(FILM, Fandango_Stars, IMDB_norm_round, RT_norm_round, Metacritic_norm_round, Metacritic_user_norm_round, RT_user_norm_round) %>%
rename(
Film = FILM,
Fandango_Rating = Fandango_Stars,
IMDB_Rating = IMDB_norm_round,
RT_Rating = RT_norm_round,
Metacritic_Rating = Metacritic_norm_round,
Metacritic_User_Rating = Metacritic_user_norm_round,
RT_User_Rating = RT_user_norm_round
)
# Calculate distributions
fandango_distribution <- data %>%
group_by(Fandango_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Fandango")
IMDB_distribution <- data %>%
group_by(IMDB_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "IMDB")
RT_distribution <- data %>%
group_by(RT_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes")
Metacritic_distribution <- data %>%
group_by(Metacritic_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic")
Metacritic_user_distribution <- data %>%
group_by(Metacritic_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic User")
RT_user_distribution <- data %>%
group_by(RT_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes User")
# Rename rating columns to the same name so we can bind rows
fandango_distribution <- fandango_distribution %>% rename(Rating = Fandango_Rating)
IMDB_distribution <- IMDB_distribution %>% rename(Rating = IMDB_Rating)
RT_distribution <- RT_distribution %>% rename(Rating = RT_Rating)
Metacritic_distribution <- Metacritic_distribution %>% rename(Rating = Metacritic_Rating)
RT_user_distribution <- RT_user_distribution %>% rename(Rating = RT_User_Rating)
Metacritic_user_distribution <- Metacritic_user_distribution %>% rename(Rating = Metacritic_User_Rating)
# Combine into one dataframe
final_data <- bind_rows(fandango_distribution, IMDB_distribution, RT_distribution, Metacritic_distribution, Metacritic_user_distribution, RT_user_distribution)
final_data$Source <- factor(combined_distribution$Source)
View(final_data)
View(final_data)
install.packages("writexl")
library(writexl)
write_xlsx(final_data, "final_data.xlsx")
View(data)
# Created: 14/05/2025
# Creator: Yanni Karlaftis
# Purpose: Clean fandango_score_comparison.csv and repopulate
library(readr)
library(dplyr)
library(writexl)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
# Fix deceptive data issue
fandango_score_comparison <- fandango_score_comparison %>%
filter(Metacritic_user_vote_count > 30, IMDB_user_vote_count > 30)
# Select only specific columns for visualization
movie_ratings <- fandango_score_comparison %>%
select(FILM, Fandango_Stars, IMDB_norm_round, RT_norm_round, Metacritic_norm_round, Metacritic_user_norm_round, RT_user_norm_round) %>%
rename(
Film = FILM,
Fandango_Rating = Fandango_Stars,
IMDB_Rating = IMDB_norm_round,
RT_Rating = RT_norm_round,
Metacritic_Rating = Metacritic_norm_round,
Metacritic_User_Rating = Metacritic_user_norm_round,
RT_User_Rating = RT_user_norm_round
)
# Calculate distributions
fandango_distribution <- movie_ratings %>%
group_by(Fandango_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Fandango")
IMDB_distribution <- movie_ratings %>%
group_by(IMDB_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "IMDB")
RT_distribution <- movie_ratings %>%
group_by(RT_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes")
Metacritic_distribution <- movie_ratings %>%
group_by(Metacritic_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic")
Metacritic_user_distribution <- movie_ratings %>%
group_by(Metacritic_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic User")
RT_user_distribution <- movie_ratings %>%
group_by(RT_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes User")
# Rename rating columns to the same name so we can bind rows
fandango_distribution <- fandango_distribution %>% rename(Rating = Fandango_Rating)
IMDB_distribution <- IMDB_distribution %>% rename(Rating = IMDB_Rating)
RT_distribution <- RT_distribution %>% rename(Rating = RT_Rating)
Metacritic_distribution <- Metacritic_distribution %>% rename(Rating = Metacritic_Rating)
RT_user_distribution <- RT_user_distribution %>% rename(Rating = RT_User_Rating)
Metacritic_user_distribution <- Metacritic_user_distribution %>% rename(Rating = Metacritic_User_Rating)
# Combine into one dataframe
final_data <- bind_rows(fandango_distribution, IMDB_distribution, RT_distribution, Metacritic_distribution, Metacritic_user_distribution, RT_user_distribution)
final_data$Source <- factor(combined_distribution$Source)
# Created: 14/05/2025
# Creator: Yanni Karlaftis
# Purpose: Clean fandango_score_comparison.csv and repopulate
library(readr)
library(dplyr)
library(writexl)
fandango_score_comparison <- read_csv("fandango_score_comparison.csv")
# Fix deceptive data issue
fandango_score_comparison <- fandango_score_comparison %>%
filter(Metacritic_user_vote_count > 30, IMDB_user_vote_count > 30)
# Select only specific columns for visualization
movie_ratings <- fandango_score_comparison %>%
select(FILM, Fandango_Stars, IMDB_norm_round, RT_norm_round, Metacritic_norm_round, Metacritic_user_norm_round, RT_user_norm_round) %>%
rename(
Film = FILM,
Fandango_Rating = Fandango_Stars,
IMDB_Rating = IMDB_norm_round,
RT_Rating = RT_norm_round,
Metacritic_Rating = Metacritic_norm_round,
Metacritic_User_Rating = Metacritic_user_norm_round,
RT_User_Rating = RT_user_norm_round
)
# Calculate distributions
fandango_distribution <- movie_ratings %>%
group_by(Fandango_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Fandango")
IMDB_distribution <- movie_ratings %>%
group_by(IMDB_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "IMDB")
RT_distribution <- movie_ratings %>%
group_by(RT_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes")
Metacritic_distribution <- movie_ratings %>%
group_by(Metacritic_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic")
Metacritic_user_distribution <- movie_ratings %>%
group_by(Metacritic_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Metacritic User")
RT_user_distribution <- movie_ratings %>%
group_by(RT_User_Rating) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Percent = Count / sum(Count) * 100) %>% mutate(Source = "Rotten Tomatoes User")
# Rename rating columns to the same name so we can bind rows
fandango_distribution <- fandango_distribution %>% rename(Rating = Fandango_Rating)
IMDB_distribution <- IMDB_distribution %>% rename(Rating = IMDB_Rating)
RT_distribution <- RT_distribution %>% rename(Rating = RT_Rating)
Metacritic_distribution <- Metacritic_distribution %>% rename(Rating = Metacritic_Rating)
RT_user_distribution <- RT_user_distribution %>% rename(Rating = RT_User_Rating)
Metacritic_user_distribution <- Metacritic_user_distribution %>% rename(Rating = Metacritic_User_Rating)
# Combine into one dataframe
final_data <- bind_rows(fandango_distribution, IMDB_distribution, RT_distribution, Metacritic_distribution, Metacritic_user_distribution, RT_user_distribution)
final_data$Source <- factor(final_data$Source)
write_xlsx(movie_ratings, "movie_ratings.xlsx")
write_xlsx(final_data, "final_data.xlsx")
shiny::runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
runApp('FandangoLovesMovies')
